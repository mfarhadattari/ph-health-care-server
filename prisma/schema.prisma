generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// All Enum Here
enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}

// DB Model Start From Here
model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole   @default(PATIENT)
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  doctor             Doctor?
  patient            Patient?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Doctor {
  id                  String            @id @default(uuid())
  email               String            @unique
  name                String
  profilePhoto        String?
  contactNumber       String
  address             String?
  registrationNumber  String
  experience          Int               @default(0)
  gender              Gender
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  avarageRating       Float             @default(0)
  isDeleted           Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  doctorSpecialty     DoctorSpecialty[]
  doctorSchedule      DoctorSchedule[]

  user User @relation(fields: [email], references: [email])

  @@map("doctors")
}

model Specialty {
  id              String            @id @default(uuid())
  title           String            @unique
  icon            String
  doctorSpecialty DoctorSpecialty[]

  @@map("specialties")
}

model DoctorSpecialty {
  specialtiesId String
  specialty     Specialty @relation(fields: [specialtiesId], references: [id])
  doctorId      String
  doctor        Doctor    @relation(fields: [doctorId], references: [id])

  @@id([specialtiesId, doctorId])
  @@map("doctor_specialties")
}

model Patient {
  id                String             @id @default(uuid())
  email             String             @unique
  name              String
  profilePhoto      String?
  contactNumber     String
  address           String?
  isDeleted         Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  patientHealthData PatientHealthData?
  medicalReport     MedicalReport[]

  user User @relation(fields: [email], references: [email])

  @@map("patients")
}

model PatientHealthData {
  id                  String         @id @default(uuid())
  patientId           String         @unique
  dateOfBirth         DateTime?
  gender              Gender?
  bloodGroup          BloodGroup?
  hasAllergies        Boolean?       @default(false)
  hasDiabetes         Boolean?       @default(false)
  height              String?
  width               String?
  smokingStatus       Boolean?       @default(false)
  dietaryPreferences  String?
  mentalHealthHistory String?
  immunizationStatus  String?
  hasPastSurgeries    Boolean?       @default(false)
  recentAnxiety       Boolean?       @default(false)
  recentDepression    Boolean?       @default(false)
  maritalStatus       MaritalStatus?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  patient Patient @relation(fields: [patientId], references: [id])

  @@map("patient_health_data")
}

model MedicalReport {
  id         String   @id @default(uuid())
  patientId  String
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id])

  @@map("medical_report")
}

model Schedule {
  id             String           @id @default(uuid())
  startDateTime  DateTime
  endDateTime    DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  doctorSchedule DoctorSchedule[]

  @@map("schedules")
}

model DoctorSchedule {
  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id])

  isBoocked Boolean @default(false)

  @@id([doctorId, scheduleId])
  @@map("doctor_schedules")
}
